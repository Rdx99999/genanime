[plugin:vite:react-swc] × the name `Card` is defined multiple times
    ╭─[/home/runner/workspace/src/components/AnimeCard.tsx:3:1]
  1 │ 
  2 │ import { Anime } from "@/types/anime";
  3 │ import { Card, CardContent } from "@/components/ui/card";
    ·          ──┬─
    ·            ╰── previous definition of `Card` here
  4 │ import { Badge } from "@/components/ui/badge";
  5 │ 
  6 │ interface AnimeCardProps {
  7 │   anime: Anime;
  8 │   onClick?: () => void;
  9 │ }
 10 │ 
 11 │ const AnimeCard = ({ anime, onClick }: AnimeCardProps) => {
 12 │   return (
 13 │     <Card 
 14 │       className="overflow-hidden anime-card-hover cursor-pointer h-full"
 15 │       onClick={onClick}
 16 │     >
 17 │       <div className="relative aspect-[2/3] overflow-hidden">
 18 │         <img 
 19 │           src={anime.imageUrl} 
 20 │           alt={anime.title} 
 21 │           className="object-cover w-full h-full transition-transform hover:scale-105"
 22 │           onError={(e) => {
 23 │             (e.target as HTMLImageElement).src = "https://images.unsplash.com/photo-1541562232579-512a21360020?q=80&w=500";
 24 │           }}
 25 │         />
 26 │         <div className="absolute top-2 right-2">
 27 │           <Badge className="bg-primary text-white">{anime.releaseYear}</Badge>
 28 │         </div>
 29 │         <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black to-transparent p-4">
 30 │           <h3 className="text-white font-bold truncate">{anime.title}</h3>
 31 │           <div className="flex items-center mt-1">
 32 │             <span className="text-xs text-white/80">{anime.episodes} Episodes</span>
 33 │           </div>
 34 │         </div>
 35 │       </div>
 36 │       <CardContent className="p-3">
 37 │         <div className="flex flex-wrap gap-1">
 38 │           {anime.genres.slice(0, 2).map((genre) => (
 39 │             <Badge key={genre} variant="secondary" className="text-xs">
 40 │               {genre}
 41 │             </Badge>
 42 │           ))}
 43 │           {anime.genres.length > 2 && (
 44 │             <Badge variant="outline" className="text-xs">
 45 │               +{anime.genres.length - 2}
 46 │             </Badge>
 47 │           )}
 48 │         </div>
 49 │       </CardContent>
 50 │     </Card>
 51 │   );
 52 │ };
 53 │ 
 54 │ export default AnimeCard;
 55 │ import { Link } from "react-router-dom";
 56 │ import { Card, CardContent } from "@/components/ui/card";
    ·          ──┬─
    ·            ╰── `Card` redefined here
 57 │ import { Anime } from "@/types/anime";
 58 │ import { useIsMobile } from "@/hooks/use-mobile";
    ╰────
  × the name `CardContent` is defined multiple times
    ╭─[/home/runner/workspace/src/components/AnimeCard.tsx:3:1]
  1 │ 
  2 │ import { Anime } from "@/types/anime";
  3 │ import { Card, CardContent } from "@/components/ui/card";
    ·                ─────┬─────
    ·                     ╰── previous definition of `CardContent` here
  4 │ import { Badge } from "@/components/ui/badge";
  5 │ 
  6 │ interface AnimeCardProps {
  7 │   anime: Anime;
  8 │   onClick?: () => void;
  9 │ }
 10 │ 
 11 │ const AnimeCard = ({ anime, onClick }: AnimeCardProps) => {
 12 │   return (
 13 │     <Card 
 14 │       className="overflow-hidden anime-card-hover cursor-pointer h-full"
 15 │       onClick={onClick}
 16 │     >
 17 │       <div className="relative aspect-[2/3] overflow-hidden">
 18 │         <img 
 19 │           src={anime.imageUrl} 
 20 │           alt={anime.title} 
 21 │           className="object-cover w-full h-full transition-transform hover:scale-105"
 22 │           onError={(e) => {
 23 │             (e.target as HTMLImageElement).src = "https://images.unsplash.com/photo-1541562232579-512a21360020?q=80&w=500";
 24 │           }}
 25 │         />
 26 │         <div className="absolute top-2 right-2">
 27 │           <Badge className="bg-primary text-white">{anime.releaseYear}</Badge>
 28 │         </div>
 29 │         <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black to-transparent p-4">
 30 │           <h3 className="text-white font-bold truncate">{anime.title}</h3>
 31 │           <div className="flex items-center mt-1">
 32 │             <span className="text-xs text-white/80">{anime.episodes} Episodes</span>
 33 │           </div>
 34 │         </div>
 35 │       </div>
 36 │       <CardContent className="p-3">
 37 │         <div className="flex flex-wrap gap-1">
 38 │           {anime.genres.slice(0, 2).map((genre) => (
 39 │             <Badge key={genre} variant="secondary" className="text-xs">
 40 │               {genre}
 41 │             </Badge>
 42 │           ))}
 43 │           {anime.genres.length > 2 && (
 44 │             <Badge variant="outline" className="text-xs">
 45 │               +{anime.genres.length - 2}
 46 │             </Badge>
 47 │           )}
 48 │         </div>
 49 │       </CardContent>
 50 │     </Card>
 51 │   );
 52 │ };
 53 │ 
 54 │ export default AnimeCard;
 55 │ import { Link } from "react-router-dom";
 56 │ import { Card, CardContent } from "@/components/ui/card";
    ·                ─────┬─────
    ·                     ╰── `CardContent` redefined here
 57 │ import { Anime } from "@/types/anime";
 58 │ import { useIsMobile } from "@/hooks/use-mobile";
    ╰────
  × the name `AnimeCard` is defined multiple times
    ╭─[/home/runner/workspace/src/components/AnimeCard.tsx:11:1]
  8 │   onClick?: () => void;
  9 │ }
 10 │ 
 11 │ const AnimeCard = ({ anime, onClick }: AnimeCardProps) => {
    ·       ────┬────
    ·           ╰── previous definition of `AnimeCard` here
 12 │   return (
 13 │     <Card 
 14 │       className="overflow-hidden anime-card-hover cursor-pointer h-full"
 15 │       onClick={onClick}
 16 │     >
 17 │       <div className="relative aspect-[2/3] overflow-hidden">
 18 │         <img 
 19 │           src={anime.imageUrl} 
 20 │           alt={anime.title} 
 21 │           className="object-cover w-full h-full transition-transform hover:scale-105"
 22 │           onError={(e) => {
 23 │             (e.target as HTMLImageElement).src = "https://images.unsplash.com/photo-1541562232579-512a21360020?q=80&w=500";
 24 │           }}
 25 │         />
 26 │         <div className="absolute top-2 right-2">
 27 │           <Badge className="bg-primary text-white">{anime.releaseYear}</Badge>
 28 │         </div>
 29 │         <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black to-transparent p-4">
 30 │           <h3 className="text-white font-bold truncate">{anime.title}</h3>
 31 │           <div className="flex items-center mt-1">
 32 │             <span className="text-xs text-white/80">{anime.episodes} Episodes</span>
 33 │           </div>
 34 │         </div>
 35 │       </div>
 36 │       <CardContent className="p-3">
 37 │         <div className="flex flex-wrap gap-1">
 38 │           {anime.genres.slice(0, 2).map((genre) => (
 39 │             <Badge key={genre} variant="secondary" className="text-xs">
 40 │               {genre}
 41 │             </Badge>
 42 │           ))}
 43 │           {anime.genres.length > 2 && (
 44 │             <Badge variant="outline" className="text-xs">
 45 │               +{anime.genres.length - 2}
 46 │             </Badge>
 47 │           )}
 48 │         </div>
 49 │       </CardContent>
 50 │     </Card>
 51 │   );
 52 │ };
 53 │ 
 54 │ export default AnimeCard;
 55 │ import { Link } from "react-router-dom";
 56 │ import { Card, CardContent } from "@/components/ui/card";
 57 │ import { Anime } from "@/types/anime";
 58 │ import { useIsMobile } from "@/hooks/use-mobile";
 59 │ 
 60 │ interface AnimeCardProps {
 61 │   anime: Anime;
 62 │ }
 63 │ 
 64 │ const AnimeCard = ({ anime }: AnimeCardProps) => {
    ·       ────┬────
    ·           ╰── `AnimeCard` redefined here
 65 │   const isMobile = useIsMobile();
 66 │   
 67 │   return (
    ╰────
  × the name `default` is exported multiple times
     ╭─[/home/runner/workspace/src/components/AnimeCard.tsx:54:1]
  51 │   );
  52 │ };
  53 │ 
  54 │ export default AnimeCard;
     · ────────────┬────────────
     ·             ╰── previous exported here
  55 │ import { Link } from "react-router-dom";
  56 │ import { Card, CardContent } from "@/components/ui/card";
  57 │ import { Anime } from "@/types/anime";
  58 │ import { useIsMobile } from "@/hooks/use-mobile";
  59 │ 
  60 │ interface AnimeCardProps {
  61 │   anime: Anime;
  62 │ }
  63 │ 
  64 │ const AnimeCard = ({ anime }: AnimeCardProps) => {
  65 │   const isMobile = useIsMobile();
  66 │   
  67 │   return (
  68 │     <Link to={`/anime/${anime.id}`}>
  69 │       <Card className="overflow-hidden anime-card-hover transition-all duration-300 h-full">
  70 │         <div className="aspect-[2/3] relative overflow-hidden">
  71 │           <img
  72 │             src={anime.coverImage}
  73 │             alt={anime.title}
  74 │             className="object-cover w-full h-full"
  75 │           />
  76 │           <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-3">
  77 │             <div className="flex items-center gap-2">
  78 │               <span className="bg-primary/90 text-white text-xs px-2 py-0.5 rounded">
  79 │                 {anime.type}
  80 │               </span>
  81 │               {anime.episodes && (
  82 │                 <span className="bg-black/70 text-white text-xs px-2 py-0.5 rounded">
  83 │                   {anime.episodes} eps
  84 │                 </span>
  85 │               )}
  86 │             </div>
  87 │           </div>
  88 │         </div>
  89 │         <CardContent className={`p-3 ${isMobile ? 'space-y-1' : 'space-y-2'}`}>
  90 │           <h3 className={`font-bold ${isMobile ? 'text-sm line-clamp-1' : 'text-base line-clamp-2'}`}>
  91 │             {anime.title}
  92 │           </h3>
  93 │           {!isMobile && (
  94 │             <p className="text-xs text-muted-foreground line-clamp-2">
  95 │               {anime.description}
  96 │             </p>
  97 │           )}
  98 │           <div className="flex items-center justify-between text-xs text-muted-foreground">
  99 │             <span>{anime.year}</span>
 100 │             <span className="flex items-center gap-1">
 101 │               <svg
 102 │                 xmlns="http://www.w3.org/2000/svg"
 103 │                 viewBox="0 0 24 24"
 104 │                 fill="currentColor"
 105 │                 className="w-3 h-3 text-yellow-400"
 106 │               >
 107 │                 <path
 108 │                   fillRule="evenodd"
 109 │                   d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z"
 110 │                   clipRule="evenodd"
 111 │                 />
 112 │               </svg>
 113 │               {anime.rating}
 114 │             </span>
 115 │           </div>
 116 │         </CardContent>
 117 │       </Card>
 118 │     </Link>
 119 │   );
 120 │ };
 121 │ 
 122 │ export default AnimeCard;
     · ────────────┬────────────
     ·             ╰── exported more than once
     ╰────

Advice:   ☞ Exported identifiers must be unique
/home/runner/workspace/src/components/AnimeCard.tsx:3:1
15 |        onClick={onClick}
16 |      >
17 |        <div className="relative aspect-[2/3] overflow-hidden">
   |  ^
18 |          <img 
19 |            src={anime.imageUrl}