[plugin:vite:react-swc] × Expected ';', '}' or <eof>
     ╭─[/home/runner/workspace/src/pages/Admin.tsx:595:1]
 592 │     };
 593 │     
 594 │     export default Admin;
 595 │ ╭─▶ ```import { useState, useEffect } from "react";
 596 │ │   import { Button } from "@/components/ui/button";
 597 │ │   import { Input } from "@/components/ui/input";
 598 │ │   import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
 599 │ │   import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
 600 │ │   import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
 601 │ │   import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
 602 │ │   import { 
 603 │ │     Table, 
 604 │ │     TableBody, 
 605 │ │     TableCaption, 
 606 │ │     TableCell, 
 607 │ │     TableHead, 
 608 │ │     TableHeader, 
 609 │ │     TableRow 
 610 │ │   } from "@/components/ui/table";
 611 │ │   import { Check, Edit, Plus, Search, Trash2, X, Loader2, Star, Clock } from "lucide-react";
 612 │ │   import AdminNavbar from "@/components/AdminNavbar";
 613 │ │   import AnimeForm from "@/components/AnimeForm";
 614 │ │   import { Anime } from "@/types/anime";
 615 │ │   import { 
 616 │ │     getAllAnimes, 
 617 │ │     getAnimeById, 
 618 │ │     createAnime, 
 619 │ │     updateAnime, 
 620 │ │     deleteAnime,
 621 │ │     updateAnimeStatus,
 622 │ │     toggleAnimePopular, 
 623 │ │     toggleAnimeNewRelease 
 624 │ │   } from "@/lib/animeData";
 625 │ │   import { useToast } from "@/hooks/use-toast";
 626 │ │   import { Switch } from "@/components/ui/switch";
 627 │ │   import { Label } from "@/components/ui/label";
 628 │ │   import { useRouter } from "next/navigation";
 629 │ │   
 630 │ │   const Admin = () => {
 631 │ │     const [animes, setAnimes] = useState<Anime[]>([]);
 632 │ │     const [filteredAnimes, setFilteredAnimes] = useState<Anime[]>([]);
 633 │ │     const [searchQuery, setSearchQuery] = useState("");
 634 │ │     const [selectedAnime, setSelectedAnime] = useState<Anime | null>(null);
 635 │ │     const [isDialogOpen, setIsDialogOpen] = useState(false);
 636 │ │     const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
 637 │ │     const [isLoading, setIsLoading] = useState(true);
 638 │ │     const [error, setError] = useState<string | null>(null);
 639 │ │     const [activeTab, setActiveTab] = useState("all");
 640 │ │   
 641 │ │     // These state variables are now redundant since status is stored in the anime object
 642 │ │     // But we'll keep them for backward compatibility
 643 │ │     const [popularAnimes, setPopularAnimes] = useState<Record<string, boolean>>({});
 644 │ │     const [newReleases, setNewReleases] = useState<Record<string, boolean>>({});
 645 │ │   
 646 │ │     const { toast } = useToast();
 647 │ │     const router = useRouter();
 648 │ │   
 649 │ │     useEffect(() => {
 650 │ │       loadAnimes();
 651 │ │     }, []);
 652 │ │   
 653 │ │     useEffect(() => {
 654 │ │       if (searchQuery.trim() === "") {
 655 │ │         if (activeTab === "all") {
 656 │ │           setFilteredAnimes(animes);
 657 │ │         } else if (activeTab === "popular") {
 658 │ │           setFilteredAnimes(animes.filter(anime => popularAnimes[anime.id]));
 659 │ │         } else if (activeTab === "new") {
 660 │ │           setFilteredAnimes(animes.filter(anime => newReleases[anime.id]));
 661 │ │         }
 662 │ │       } else {
 663 │ │         let filtered = animes.filter(
 664 │ │           anime => anime.title.toLowerCase().includes(searchQuery.toLowerCase())
 665 │ │         );
 666 │ │   
 667 │ │         if (activeTab === "popular") {
 668 │ │           filtered = filtered.filter(anime => popularAnimes[anime.id]);
 669 │ │         } else if (activeTab === "new") {
 670 │ │           filtered = filtered.filter(anime => newReleases[anime.id]);
 671 │ │         }
 672 │ │   
 673 │ │         setFilteredAnimes(filtered);
 674 │ │       }
 675 │ │     }, [searchQuery, animes, activeTab, popularAnimes, newReleases]);
 676 │ │   
 677 │ │     const loadAnimes = async () => {
 678 │ │       try {
 679 │ │         setIsLoading(true);
 680 │ │         const data = await getAllAnimes();
 681 │ │   
 682 │ │         // Initialize our section trackers from database fields
 683 │ │         const popular: Record<string, boolean> = {};
 684 │ │         const newest: Record<string, boolean> = {};
 685 │ │   
 686 │ │         // Use the database fields to populate our state
 687 │ │         data.forEach(anime => {
 688 │ │           if (anime.isPopular) {
 689 │ │             popular[anime.id] = true;
 690 │ │           }
 691 │ │   
 692 │ │           if (anime.isNewRelease) {
 693 │ │             newest[anime.id] = true;
 694 │ │           }
 695 │ │         });
 696 │ │   
 697 │ │         setPopularAnimes(popular);
 698 │ │         setNewReleases(newest);
 699 │ │         setAnimes(data);
 700 │ │         setFilteredAnimes(data);
 701 │ │       } catch (error) {
 702 │ │         console.error("Error loading animes:", error);
 703 │ │         setError("Failed to load anime data");
 704 │ │         toast({
 705 │ │           title: "Error",
 706 │ │           description: "Failed to load anime data",
 707 │ │           variant: "destructive"
 708 │ │         });
 709 │ │       } finally {
 710 │ │         setIsLoading(false);
 711 │ │       }
 712 │ │     };
 713 │ │   
 714 │ │     const handleCreateAnime = async (animeData: Omit<Anime, "id">) => {
 715 │ │       try {
 716 │ │         await createAnime(animeData);
 717 │ │         await loadAnimes();
 718 │ │         setIsDialogOpen(false);
 719 │ │         toast({
 720 │ │           title: "Success",
 721 │ │           description: "Anime created successfully",
 722 │ │           variant: "default"
 723 │ │         });
 724 │ │       } catch (error) {
 725 │ │         console.error("Error creating anime:", error);
 726 │ │         toast({
 727 │ │           title: "Error",
 728 │ │           description: "Failed to create anime",
 729 │ │           variant: "destructive"
 730 │ │         });
 731 │ │       }
 732 │ │     };
 733 │ │   
 734 │ │     const handleUpdateAnime = async (animeData: Omit<Anime, "id">) => {
 735 │ │       if (!selectedAnime) return;
 736 │ │   
 737 │ │       try {
 738 │ │         await updateAnime(selectedAnime.id, animeData);
 739 │ │         await loadAnimes();
 740 │ │         setIsDialogOpen(false);
 741 │ │         setSelectedAnime(null);
 742 │ │         toast({
 743 │ │           title: "Success",
 744 │ │           description: "Anime updated successfully",
 745 │ │           variant: "default"
 746 │ │         });
 747 │ │       } catch (error) {
 748 │ │         console.error("Error updating anime:", error);
 749 │ │         toast({
 750 │ │           title: "Error",
 751 │ │           description: "Failed to update anime",
 752 │ │           variant: "destructive"
 753 │ │         });
 754 │ │       }
 755 │ │     };
 756 │ │   
 757 │ │     const handleDeleteAnime = async () => {
 758 │ │       if (!selectedAnime) return;
 759 │ │   
 760 │ │       try {
 761 │ │         await deleteAnime(selectedAnime.id);
 762 │ │         await loadAnimes();
 763 │ │         setIsDeleteDialogOpen(false);
 764 │ │         setSelectedAnime(null);
 765 │ │         toast({
 766 │ │           title: "Success",
 767 │ │           description: "Anime deleted successfully",
 768 │ │           variant: "default"
 769 │ │         });
 770 │ │       } catch (error) {
 771 │ │         console.error("Error deleting anime:", error);
 772 │ │         toast({
 773 │ │           title: "Error",
 774 │ │           description: "Failed to delete anime",
 775 │ │           variant: "destructive"
 776 │ │         });
 777 │ │       }
 778 │ │     };
 779 │ │   
 780 │ │     const openEditDialog = (anime: Anime) => {
 781 │ │       setSelectedAnime(anime);
 782 │ │       setIsDialogOpen(true);
 783 │ │     };
 784 │ │   
 785 │ │     const openDeleteDialog = (anime: Anime) => {
 786 │ │       setSelectedAnime(anime);
 787 │ │       setIsDeleteDialogOpen(true);
 788 │ │     };
 789 │ │   
 790 │ │     const togglePopular = async (animeId: string) => {
 791 │ │       // Get the current state before toggling
 792 │ │       const currentStatus = popularAnimes[animeId] || false;
 793 │ │       const newStatus = !currentStatus;
 794 │ │   
 795 │ │       // Optimistically update the UI
 796 │ │       setPopularAnimes(prev => ({
 797 │ │         ...prev,
 798 │ │         [animeId]: newStatus
 799 │ │       }));
 800 │ │   
 801 │ │       try {
 802 │ │         // Update in the database
 803 │ │         await toggleAnimePopular(animeId, newStatus);
 804 │ │   
 805 │ │         toast({
 806 │ │           title: newStatus ? "Added to Popular" : "Removed from Popular",
 807 │ ├─▶         description: `Anime has been ${newStatus ? "added to" : "removed from"} the Popular section`,
     · ╰───                      ─────
     · ╰──── This is the expression part of an expression statement
 808 │             variant: "default"
 809 │           });
 810 │         } catch (error) {
     ╰────


Caused by:
    Syntax Error

/home/runner/workspace/src/pages/Admin.tsx:595:1

